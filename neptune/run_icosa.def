###########################################################################
### RUN_ICOSA.DEF ### RUN_ICOSA.DEF ### RUN_ICOSA.DEF ### RUN_ICOSA.DEF ###
###########################################################################

###########################################################################
### INITIALIZATION
###########################################################################

#INCLUDEDEF=neptune_const.def

##mpi_threading_mode=serialized
#mpi_threading_mode=funneled

#halo_i=0
#halo_j=1

###########################################################################
### MESH GRID
###########################################################################
### nbp --> number of subdivision on a main triangle: integer (default=40)
###         nbp = sqrt((nbr_lat x nbr_lon)/10)
###         nbp                 20  40  80 160
###         T-edge length (km) 500 250 120  60
### nsplit_i, nsplit_j --> sub splitting of main rhombus: integer (default=1)
###                        It is better to have nbp/split >~ 10
###                        if nsplit_i = 4 & nsplit_j = 6
###                        nbp/nsplit_{i,j} = 20 > 10 & 13 > 10 --> GOOD
### omp_level_size --> integer (default=1)
###                    must be equal to 1 on MPI case
###                    must be equal to cpus-per-task on hybrid OpenMP/MPI case
### llm --> number of vertical layer: integer (default=19)
### disvert --> vertical discretisation : string (default='std') : std, ncar, ncar30l, plugin, read_apbp
### hybrid --> logical: hybrid (default=.true.) or sigma coordinates (.false.)
### optim_it --> mesh optimisation : number of iteration : integer (default=0)
###########################################################################

nbp = 80
nsplit_i = 4
nsplit_j = 7
omp_level_size = 4
llm = 48
disvert = plugin
hybrid = false
optim_it = 0

###########################################################################
### XIOS
###########################################################################
### enable_io --> activate IO (default = true)
### xios_output --> output with XIOS (only if compiled with XIOS): true/false (default=true)
###########################################################################

#enable_io = false
#xios_output = false

###########################################################################
### TIME
###########################################################################
### scheme --> scheme type : string (default=runge_kutta) :
###            euler, leapfrog_matsuno, runge_kutta
### time_scheme --> ARK2.3 (RK 2nd order at 3 levels) (default) | leapfrog_matsuno | runge_kutta | euler | RK2.5
### matsuno_period --> matsuno period : integer (default=5)
### dt --> dynamical timestep : real (s) (default=480s)
###        Attention 3 chiffres significatifs dans XIOS
###        dt = day length (s) / day_step 
###        dt = duration of a dynamical time step
###        day_step = number of dynamical time step per day
###        Exemple: day_step = 100 per day and day length = 57996.s dt = 579.96 s
###        ts (physical timestep) = dt x itau_physics
###        Physics called (day_step / itau_physics)   per day
###        Physics called day_length / ts    per day
###        Radiative called every Physics x iradia    physical timestep
###        Radiative called every iradia/Physics      days
### day_step --> number of dynamical time step per day (default=0)
### itau_adv --> advection called every itau_adv time steps : integer (default=1)
###              standard : umax=100m/s vs c=340m/s (ratio 1:3)
###              in JW06 umax=35m/s vs c=340m/s (ratio 1:10)
### itaumax --> number of timestep (default=0) (ignored if run_length is set)
### run_length --> run length in planet day: real (s) (default=dt*itaumax)
###                In makestart = run_length must be equal to 1 day
### ndays --> number of days to run (substitute run_length) !!!! (default=0)
### write_period --> output field period (valid XIOS or not) : integer (s) (default=0)
###                  [should be equal to dt if XIOS dynamical outputs are wanted]
###                  [because write_period sets synchronization frequency with XIOS]
###########################################################################

time_scheme = runge_kutta
#matsuno_period = 5
#dt = 289.98
day_step = 200
itau_adv = 3
#itaumax = 10
#run_length = 57996000
ndays = 1000
write_period = 289.98

###########################################################################
### MISCELLANEOUS
###########################################################################
### nqtot --> number of tracer : integer (default=1)
### out_pression_level --> pressure value where output is interpolated : real (default=0, no output)
### etat0 --> initial state : string (default=jablonowsky06) : 
###           jablonowsky06, academic, ncar, temperature_profile, start_file
###           if etat0=temperature_profile -> 
###              temperature_profile_file --> temperature profile file name
###           if etat0=start_file : 
###              etat0_start_file_colocated --> (default=.false.)
###              start_file_name --> start file name
###              restart_file_name --> restart file name
### etat0_start_iteration_reset --> Necessary if we do long simulation (default=.false.)
### etat0_start_iteration --> default = 0 (if etat0_start_iteration_reset = true)
###########################################################################

nqtot = 0
#out_pression_level = 85000
#etat0 = temperature_profile
#temperature_profile_file = temp_profile.txt
etat0 = start_file
etat0_start_file_colocated = false
start_file_name = start_icosa
restart_file_name = restart_icosa
etat0_start_iteration_reset=true.
etat0_start_iteration=0

###########################################################################
### DYNAMICS
###########################################################################
### caldyn --> computation type for gcm equation : string (default=gcm) : gcm, adv
### caldyn_conserv --> string (default=energy) : energy,enstrophy
### caldyn_exner --> scheme for computing Exner function : string (default=direct) : direct,lmdz
### guided_type --> string (default=none) : none, ncar
###########################################################################

caldyn = gcm
caldyn_conserv = energy
caldyn_exner = direct
guided_type = none

###########################################################################
### DAMPING ("SPONGE") LAYER AT MODEL TOP
###########################################################################
### iflag_sponge=0 for no sponge (default)
### iflag_sponge=1 for sponge over 4 topmost layers
### iflag_sponge=2 for sponge from top to ~1% of top layer pressure
### mode_sponge=1 for u,v --> 0
### mode_sponge=2 for u,v --> zonal mean
### mode_sponge=3 for u,v,h --> zonal mean
### tau_sponge --> damping frequency at last layer
###            --> e-5 medium / e-4 strong yet reasonable / e-3 very strong
###########################################################################

iflag_sponge = 0
#mode_sponge = 1
#tau_sponge = 1.e-4

###########################################################################
### HORIZONTAL DISSIPATION
###########################################################################
### tau_graddiv --> dissipation timescale of smallest wvl: u,v (gradiv) : real (default=5000)
### tau_gradrot --> dissipation timescale of smallest wvl: u,v (nxgradrot) : real (default=5000)
### tau_divgrad --> dissipation timescale of smallest wvl: h (divgrad) : real (default=5000)
### nitergdiv --> number of iterations for gradiv operator : integer (default=1)
### nitergrot --> number of iterations for nxgradrot operator : integer (default=1)
### niterdivgrad --> number of iterations for divgrad operator : integer (default=1)
###########################################################################

tau_graddiv = 10000
tau_gradrot = 10000
tau_divgrad = 10000
nitergdiv = 2
nitergrot = 2
niterdivgrad = 2

###########################################################################
### ENHANCEMENT OF HORIZONTAL DISSIPATION IN UPPERMOST LEVELS 
###########################################################################
### vert_prof_dissip_type --> (default = legacy) legacy, plugin
### vert_prof_dissip_setup --> none (default, no vertical variation), 
###                            altitude (mars model setup),  
###                            pressure (venus model setup)
### dissip_fac_mid --> multiplicative coefficient in the middle atmosphere
###                    if vert_prof_dissip_setup == altitude, default value = 3
###                    if vert_prof_dissip_setup == pressure, default value = 2
### dissip_fac_up --> multiplicative coefficient in the upper atmosphere
###                    if vert_prof_dissip_setup == altitude, default value = 30
###                    if vert_prof_dissip_setup == pressure, default value = 10
### dissip_startalt --> pseudo-altitude (km) for the middle to upper transition (ONLY on mars model setup)
###                    if vert_prof_dissip_setup == altitude, default value = 70
### dissip_deltaz --> size (km) of the middle-upper transition region
###                    if vert_prof_dissip_setup == altitude, default value = 30
###                    if vert_prof_dissip_setup == pressure, default value = 10
### dissip_pupstart --> pressure (Pa) at which the transition starts (ONLY on venus model setup)
###                    if vert_prof_dissip_setup == pressure, default value = 1.e3
### dissip_hdelta --> scale height (km) in the transition region (ONLY on venus model setup)
###                    if vert_prof_dissip_setup == pressure, default value = 5
###########################################################################

vert_prof_dissip_type = plugin
vert_prof_dissip_setup = altitude
#dissip_fac_mid = 2.
#dissip_fac_up = 8.
#dissip_startalt = 140.
#dissip_deltaz = 40.
#dissip_pupstart = 0
#dissip_hdelta = 0

###########################################################################
### RAYLEIGH FRICTION
###########################################################################
### rayleigh_friction_type --> Rayleigh friction : string (default=none) :
###                            none, dcmip2_schaer_noshear, dcmip2_schaer_shear, giant_liu_schneider
### rayleigh_limlat --> angle : real
### rayleigh_friction_tau --> real
###########################################################################

rayleigh_friction_type = giant_liu_schneider
rayleigh_limlat = 17.19
rayleigh_friction_tau = 8640000.

###########################################################################
### PHYSICS
###########################################################################
### itau_physics --> physics (ts) called every dt x itau_physics seconds (default=1)
###                  Physics called (day_step (in run.def for LMDZ GENERIC) / itau_physics) per day
###                  Physics called day_length / ts per day
###                  For some reason, physical timestep must be less a day
###                  Beware! iphysiq (in run.def for DYNAMICO) must be same as itau_physics
### physics --> kind of physics : string (default=none) : none, dcmip, phys_external
###########################################################################

itau_physics = 50
physics = phys_external

###########################################################################
### CHECK CONSERVATION
###########################################################################
### check_conservation -> basic (default) or detailed
### itau_check_conserv -> time step for check_conservation
###########################################################################

check_conservation = detailed
itau_check_conserv = 320
